name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install
        
      - name: Build project
        run: |
          npm run build
        env:
          NODE_ENV: production
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>&1
          chmod 600 ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          if ! ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"; then
            echo "SSH connection failed"
            exit 1
          fi
          
      - name: Prepare deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          DEPLOY_PATH: /www/wwwroot/tino-tools
        run: |
          echo "Creating deployment package..."
          
          # Create clean file list
          echo "Creating file list..."
          find . -type f \
            ! -path "./.git/*" \
            ! -path "./.github/*" \
            ! -path "./node_modules/*" \
            ! -path "./.next/*" \
            ! -name ".DS_Store" \
            ! -name "._*" \
            ! -name ".AppleDouble" \
            ! -name ".LSOverride" \
            ! -name "deploy.tar.gz" \
            ! -name ".*" \
            -print > files_to_archive.txt
          
          # Show files to be packaged
          echo "Files to be packaged:"
          cat files_to_archive.txt
          
          # Create deployment package
          echo "Creating tar archive..."
          tar --exclude=".*" -czf deploy.tar.gz -T files_to_archive.txt
          
          echo "Uploading deployment package..."
          scp -P $SERVER_PORT deploy.tar.gz $SERVER_USERNAME@$SERVER_HOST:$DEPLOY_PATH/
          
          echo "Preparing server environment..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && \
            # Backup current version if exists
            if [ -f package.json ]; then \
              echo 'Creating backup...' && \
              tar -czf ../tino-tools-backup-\$(date +%Y%m%d_%H%M%S).tar.gz . ; \
            fi && \
            # Clean up old files but keep the new package
            echo 'Cleaning old files...' && \
            find . -mindepth 1 -maxdepth 1 ! -name 'deploy.tar.gz' -exec rm -rf {} + && \
            # Extract new files
            echo 'Extracting new files...' && \
            tar -xzf deploy.tar.gz && \
            # Show extracted files
            echo 'Extracted files:' && \
            ls -la && \
            # Remove the package
            rm deploy.tar.gz"
          
          rm files_to_archive.txt deploy.tar.gz
            
      - name: Deploy and start application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        run: |
          echo "Installing dependencies and starting application..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd /www/wwwroot/tino-tools && \
            # Check current directory
            echo 'Current directory contents:' && \
            ls -la && \
            # Install dependencies
            echo 'Installing dependencies...' && \
            export NODE_ENV=production && \
            npm install && \
            # Build project
            echo 'Building project...' && \
            npm run build && \
            # Start application
            echo 'Starting application...' && \
            export PORT=3000 HOST=0.0.0.0 && \
            pm2 delete tino-tools || true && \
            pm2 start npm --name tino-tools -- start"
            
      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        run: |
          echo "Verifying deployment..."
          if ! curl -s http://$SERVER_HOST:3000 > /dev/null; then
            echo "Application is not responding"
            echo "Checking PM2 status..."
            ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "pm2 status"
            echo "Checking application logs..."
            ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "pm2 logs tino-tools --lines 50"
            exit 1
          fi
          echo "Deployment verified successfully" 