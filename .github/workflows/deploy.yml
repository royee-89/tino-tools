name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install
        
      - name: Run tests
        run: |
          npm run test || echo "No tests found"
        
      - name: Build project
        run: |
          npm run build
        env:
          NODE_ENV: production
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>&1
          chmod 600 ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          if ! ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"; then
            echo "SSH connection failed"
            exit 1
          fi
          
      - name: Prepare deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "=== Starting deployment preparation ==="
          
          # Create clean file list
          echo "Creating file list..."
          find . -maxdepth 1 -type f \
            ! -path "*/\.*" \
            ! -name ".*" \
            ! -name "*~" \
            ! -name "*.swp" \
            ! -name "*.bak" \
            ! -name "files_to_archive.txt" \
            ! -name "deploy.tar.gz" \
            -print > files_to_archive.txt
          
          find ./src -type f \
            ! -path "*/\.*" \
            ! -name ".*" \
            ! -name "*~" \
            ! -name "*.swp" \
            ! -name "*.bak" \
            -print >> files_to_archive.txt
            
          find ./public -type f \
            ! -path "*/\.*" \
            ! -name ".*" \
            ! -name "*~" \
            ! -name "*.swp" \
            ! -name "*.bak" \
            -print >> files_to_archive.txt
          
          # Show files to be packaged
          echo "Files to be packaged:"
          cat files_to_archive.txt
          
          # Verify file list is not empty
          if [ ! -s files_to_archive.txt ]; then
            echo "Error: No files found to package"
            exit 1
          fi
          
          # Create deployment package
          echo "Creating tar archive..."
          tar -czf deploy.tar.gz -T files_to_archive.txt
          
          # Verify tar file was created successfully
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: Failed to create deployment package"
            exit 1
          fi
          
          echo "Uploading deployment package..."
          if ! scp -P $SERVER_PORT deploy.tar.gz $SERVER_USERNAME@$SERVER_HOST:$DEPLOY_PATH/; then
            echo "Error: Failed to upload deployment package"
            exit 1
          fi
          
          echo "Preparing server environment..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && \
            # Backup current version if exists
            if [ -f package.json ]; then \
              echo 'Creating backup...' && \
              mkdir -p ../backups && \
              tar -czf ../backups/tino-tools-backup-\$(date +%Y%m%d_%H%M%S).tar.gz . && \
              cd ../backups && ls -t | tail -n +6 | xargs -I {} rm -f {} && cd - ; \
            fi && \
            # Clean directory but keep the new package
            echo 'Cleaning old files...' && \
            find . -mindepth 1 -maxdepth 1 ! -name 'deploy.tar.gz' -exec rm -rf {} + && \
            # Extract new files
            echo 'Extracting new files...' && \
            tar -xzf deploy.tar.gz && \
            rm -f deploy.tar.gz && \
            # Fix permissions
            echo 'Fixing permissions...' && \
            chown -R root:root . && \
            chmod -R 755 . && \
            # Verify critical files
            echo 'Verifying files...' && \
            if [ ! -f package.json ]; then \
              echo 'Error: package.json not found' && exit 1; \
            fi && \
            if [ ! -f next.config.js ]; then \
              echo 'Error: next.config.js not found' && exit 1; \
            fi && \
            # Install and build
            echo 'Installing dependencies...' && \
            export NODE_ENV=production && \
            npm install && \
            echo 'Building application...' && \
            npm run build && \
            # Start application
            echo 'Starting application...' && \
            export PORT=3000 HOST=0.0.0.0 && \
            pm2 delete tino-tools || true && \
            pm2 start npm --name tino-tools -- start && \
            # Verify application is running
            echo 'Verifying application...' && \
            sleep 5 && \
            if ! pm2 show tino-tools | grep -q 'status.*online'; then \
              echo 'Error: Application failed to start' && exit 1; \
            fi"
          
          # Clean up local files
          rm files_to_archive.txt deploy.tar.gz
          
          echo "=== Deployment preparation completed ==="
            
      - name: Deploy and start application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "=== Starting application deployment ==="
          
          # Deploy and start application with error handling
          if ! ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && \
            # Backup current version if exists
            if [ -f package.json ]; then \
              echo 'Creating backup...' && \
              mkdir -p ../backups && \
              tar -czf ../backups/tino-tools-backup-\$(date +%Y%m%d_%H%M%S).tar.gz . && \
              cd ../backups && ls -t | tail -n +6 | xargs -I {} rm -f {} && cd - ; \
            fi && \
            # Clean directory but keep the new package
            echo 'Cleaning old files...' && \
            find . -mindepth 1 -maxdepth 1 ! -name 'deploy.tar.gz' -exec rm -rf {} + && \
            # Extract new files
            echo 'Extracting new files...' && \
            tar -xzf deploy.tar.gz && \
            rm -f deploy.tar.gz && \
            # Fix permissions
            echo 'Fixing permissions...' && \
            chown -R root:root . && \
            chmod -R 755 . && \
            # Verify critical files
            echo 'Verifying files...' && \
            if [ ! -f package.json ]; then \
              echo 'Error: package.json not found' && exit 1; \
            fi && \
            if [ ! -f next.config.js ]; then \
              echo 'Error: next.config.js not found' && exit 1; \
            fi && \
            # Install and build
            echo 'Installing dependencies...' && \
            export NODE_ENV=production && \
            npm install && \
            echo 'Building application...' && \
            npm run build && \
            # Start application
            echo 'Starting application...' && \
            export PORT=3000 HOST=0.0.0.0 && \
            pm2 delete tino-tools || true && \
            pm2 start npm --name tino-tools -- start && \
            # Verify application is running
            echo 'Verifying application...' && \
            sleep 5 && \
            if ! pm2 show tino-tools | grep -q 'status.*online'; then \
              echo 'Error: Application failed to start' && exit 1; \
            fi"; then
            
            echo "Deployment failed, attempting rollback..."
            
            # Attempt rollback to last backup
            LATEST_BACKUP=$(ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd ../backups && ls -t tino-tools-backup-*.tar.gz | head -1")
            
            if [ -n "${LATEST_BACKUP}" ]; then
              echo "Rolling back to ${LATEST_BACKUP}..."
              ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && \
                rm -rf * && \
                cd ../backups && \
                tar -xzf ${LATEST_BACKUP} -C $DEPLOY_PATH && \
                cd $DEPLOY_PATH && \
                chown -R root:root . && \
                chmod -R 755 . && \
                export NODE_ENV=production && \
                npm install && \
                npm run build && \
                export PORT=3000 HOST=0.0.0.0 && \
                pm2 delete tino-tools || true && \
                pm2 start npm --name tino-tools -- start"
              
              echo "Rollback completed"
              exit 1
            else
              echo "No backup found for rollback"
              exit 1
            fi
          fi
          
          echo "=== Application deployment completed ==="
          
      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        run: |
          echo "=== Verifying deployment ==="
          
          # Wait for application to start
          sleep 10
          
          # Check if process is running
          if ! ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "pm2 show tino-tools | grep -q 'status.*online'"; then
            echo "Error: Application is not running"
            exit 1
          fi
          
          echo "=== Deployment verification completed ===" 