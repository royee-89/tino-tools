name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm install
      
      - name: Build project
        run: |
          npm run build
      
      - name: Configure Tencent Cloud Security Group
        env:
          TENCENTCLOUD_SECRET_ID: ${{ secrets.TENCENTCLOUD_SECRET_ID }}
          TENCENTCLOUD_SECRET_KEY: ${{ secrets.TENCENTCLOUD_SECRET_KEY }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          REGION: ${{ secrets.REGION }}
        run: |
          # 安装腾讯云 CLI
          pip install tccli
          
          # 配置腾讯云凭证
          tccli configure set secretId $TENCENTCLOUD_SECRET_ID
          tccli configure set secretKey $TENCENTCLOUD_SECRET_KEY
          tccli configure set region $REGION
          
          # 获取当前 IP
          CURRENT_IP=$(curl -s ifconfig.me)
          echo "当前 IP: $CURRENT_IP"
          
          # 添加安全组规则
          echo "添加安全组规则..."
          tccli vpc CreateSecurityGroupPolicies --cli-unfold-argument \
            --SecurityGroupId $SECURITY_GROUP_ID \
            --SecurityGroupPolicySet.Ingress.0.Protocol TCP \
            --SecurityGroupPolicySet.Ingress.0.Port 22 \
            --SecurityGroupPolicySet.Ingress.0.CidrBlock ${CURRENT_IP}/32 \
            --SecurityGroupPolicySet.Ingress.0.Action ACCEPT \
            --SecurityGroupPolicySet.Ingress.0.Description "GitHub Actions Deploy"
      
      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # 设置 SSH 密钥
          mkdir -p ~/.ssh
          echo "设置 SSH 目录权限..."
          chmod 700 ~/.ssh
          
          echo "写入 SSH 密钥..."
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          
          echo "设置密钥权限..."
          chmod 600 ~/.ssh/id_rsa
          
          echo "添加服务器到已知主机..."
          ssh-keyscan -H -p $SERVER_PORT $SERVER_HOST >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts
          
          echo "测试 SSH 连接..."
          ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "echo '连接成功'"
          
          echo "打包项目文件..."
          tar -zcf /tmp/deploy.tar.gz .
          
          echo "传输文件到服务器..."
          scp -P $SERVER_PORT /tmp/deploy.tar.gz $SERVER_USERNAME@$SERVER_HOST:/www/wwwroot/tino-tools/
          
          echo "执行部署命令..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd /www/wwwroot/tino-tools && \
            tar -xzf deploy.tar.gz && \
            rm -f deploy.tar.gz && \
            export NODE_ENV=production && \
            pm2 reload tino-tools || pm2 start npm --name tino-tools -- start"
      
      - name: Cleanup Security Group Rule
        if: always()
        env:
          TENCENTCLOUD_SECRET_ID: ${{ secrets.TENCENTCLOUD_SECRET_ID }}
          TENCENTCLOUD_SECRET_KEY: ${{ secrets.TENCENTCLOUD_SECRET_KEY }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          REGION: ${{ secrets.REGION }}
        run: |
          # 获取当前 IP
          CURRENT_IP=$(curl -s ifconfig.me)
          
          # 删除安全组规则
          echo "清理安全组规则..."
          tccli vpc DeleteSecurityGroupPolicies --cli-unfold-argument \
            --SecurityGroupId $SECURITY_GROUP_ID \
            --SecurityGroupPolicySet.Ingress.0.Protocol TCP \
            --SecurityGroupPolicySet.Ingress.0.Port 22 \
            --SecurityGroupPolicySet.Ingress.0.CidrBlock ${CURRENT_IP}/32 \
            --SecurityGroupPolicySet.Ingress.0.Action ACCEPT 