name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          # 清理 npm 缓存
          npm cache clean --force
          # 使用 --legacy-peer-deps 标志确保兼容性
          npm install --legacy-peer-deps
          # 确保安装所有必要的 Chakra UI 依赖
          npm install @chakra-ui/react @chakra-ui/icons @emotion/react @emotion/styled framer-motion --legacy-peer-deps
          # 验证依赖是否安装成功
          ls -la node_modules/@chakra-ui/icons || echo "@chakra-ui/icons 依赖未找到"
        
      - name: Run tests
        run: |
          npm run test || echo "No tests found"
        
      - name: Build project
        run: |
          # 创建版本信息
          echo "export const BUILD_VERSION = '$(date +%Y%m%d%H%M%S)';" > src/lib/version.js
          echo "export const BUILD_DATE = '$(date)';" >> src/lib/version.js
          # 清理缓存并构建
          rm -rf .next
          # 添加随机字符串到构建中，确保每次构建都是唯一的
          echo "NEXT_PUBLIC_BUILD_ID=$(date +%s)" > .env.production
          npm run build
        env:
          NODE_ENV: production
          # 禁用Next.js的构建缓存
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_FORCE_BUILD: true
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>&1
          chmod 600 ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          if ! ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"; then
            echo "SSH connection failed"
            exit 1
          fi
          
      - name: Deploy and start application
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "=== Starting deployment ==="
          
          # Create clean file list
          echo "Creating file list..."
          
          # Create a directory listing file
          echo "Listing all files to be packaged..."
          find . -type f -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./.github/*" -not -path "./.next/cache/*" > all_files.txt
          
          # Create tar archive with all files
          echo "Creating tar archive..."
          tar -czf deploy.tar.gz -T all_files.txt
          
          # Backup current version if exists on server
          echo "Creating backup on server if needed..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "
            if [ -d \"$DEPLOY_PATH\" ] && [ -f \"$DEPLOY_PATH/package.json\" ]; then
              echo 'Creating backup...'
              mkdir -p \"$DEPLOY_PATH/../backups\"
              tar -czf \"$DEPLOY_PATH/../backups/tino-tools-backup-\$(date +%Y%m%d_%H%M%S).tar.gz\" -C \"$DEPLOY_PATH\" .
              # Keep only last 5 backups
              cd \"$DEPLOY_PATH/../backups\" && ls -t | tail -n +6 | xargs -I {} rm -f {}
            fi
          "
          
          # Upload the archive to server
          echo "Uploading deployment package..."
          scp -P $SERVER_PORT deploy.tar.gz $SERVER_USERNAME@$SERVER_HOST:/tmp/deploy-tino-tools.tar.gz
          
          # Extract and deploy on server
          echo "Deploying on server..."
          ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "
            set -e
            mkdir -p \"$DEPLOY_PATH\"
            cd \"$DEPLOY_PATH\"
            
            # Clean current directory but keep node_modules if it exists
            if [ -d node_modules ]; then
              echo 'Preserving node_modules...'
              mv node_modules /tmp/tino-tools-node_modules
            fi
            
            echo 'Cleaning directory...'
            rm -rf * .[!.]* ..?*
            
            echo 'Extracting new files...'
            tar -xzf /tmp/deploy-tino-tools.tar.gz --strip-components=1
            rm -f /tmp/deploy-tino-tools.tar.gz
            
            # Restore node_modules if it was saved
            if [ -d /tmp/tino-tools-node_modules ]; then
              echo 'Restoring node_modules...'
              rm -rf node_modules
              mv /tmp/tino-tools-node_modules node_modules
            fi
            
            # Fix permissions
            echo 'Fixing permissions...'
            chown -R root:root .
            chmod -R 755 .
            
            # Verify critical files
            echo 'Verifying files...'
            if [ ! -f package.json ]; then
              echo 'Error: package.json not found'
              exit 1
            fi
            
            # Installing dependencies
            echo 'Installing dependencies...'
            npm install
            
            # Start the application
            echo 'Starting application...'
            export NODE_ENV=production
            export PATH=\$PATH:\$(pwd)/node_modules/.bin
            
            # 确保.next目录权限正确
            if [ -d .next ]; then
              chmod -R 755 .next
              
              # 通过添加时间戳到静态文件，强制客户端刷新
              find .next -type f -name "*.js" -o -name "*.css" | xargs -I{} touch {}
            fi
            
            # 清理任何可能的缓存文件
            find ./public -name '*.gz' -delete
            find ./public -name '*.br' -delete
            
            # 确保使用最新构建文件
            echo 'const requireCache = require.cache; for (const key in requireCache) { delete requireCache[key]; }' > clear-cache.js
            node clear-cache.js
            
            # 使用 PORT 环境变量启动 Next.js
            export PORT=3000
            export HOST=0.0.0.0
            
            # Delete existing PM2 process if exists
            pm2 delete tino-tools 2>/dev/null || true
            
            # Start with PM2 and force environment refresh
            pm2 start npm --update-env --name tino-tools -- start
            
            # Verify application is running
            echo 'Verifying application...'
            sleep 10
            
            if ! pm2 show tino-tools | grep -q 'status.*online'; then
              echo 'PM2 process is not running, checking logs:'
              pm2 logs tino-tools --lines 20
              exit 1
            fi
            
            echo 'Deployment successful!'
          "
          
          # Clean up local files
          rm -f deploy.tar.gz all_files.txt
          
          echo "=== Deployment completed ==="
          
      - name: Verify deployment
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          echo "=== Verifying deployment ==="
          
          # Wait for application to start
          sleep 5
          
          # Check if process is running
          if ! ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && pm2 show tino-tools | grep -q 'status.*online'"; then
            echo "Error: Application is not running"
            ssh -p $SERVER_PORT $SERVER_USERNAME@$SERVER_HOST "cd $DEPLOY_PATH && pm2 logs tino-tools --lines 30"
            exit 1
          fi
          
          echo "=== Deployment verification completed ===" 